// Copyright 2020 Sogou Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: sogou/speech/ns/v1/ns.proto

package ns

import (
	proto "github.com/golang/protobuf/proto"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Audio encoding of the data sent in the audio message. All encodings support
// only 1 channel (mono) audio.
type SuppressionConfig_AudioEncoding int32

const (
	// Not specified. Will return result status equal to http 400 Bad Request.
	SuppressionConfig_ENCODING_UNSPECIFIED SuppressionConfig_AudioEncoding = 0
	// Uncompressed 16-bit signed little-endian samples (Linear PCM).
	// `sample_rate_hertz` must be 16000.
	SuppressionConfig_LINEAR16 SuppressionConfig_AudioEncoding = 1
)

// Enum value maps for SuppressionConfig_AudioEncoding.
var (
	SuppressionConfig_AudioEncoding_name = map[int32]string{
		0: "ENCODING_UNSPECIFIED",
		1: "LINEAR16",
	}
	SuppressionConfig_AudioEncoding_value = map[string]int32{
		"ENCODING_UNSPECIFIED": 0,
		"LINEAR16":             1,
	}
)

func (x SuppressionConfig_AudioEncoding) Enum() *SuppressionConfig_AudioEncoding {
	p := new(SuppressionConfig_AudioEncoding)
	*p = x
	return p
}

func (x SuppressionConfig_AudioEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SuppressionConfig_AudioEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_sogou_speech_ns_v1_ns_proto_enumTypes[0].Descriptor()
}

func (SuppressionConfig_AudioEncoding) Type() protoreflect.EnumType {
	return &file_sogou_speech_ns_v1_ns_proto_enumTypes[0]
}

func (x SuppressionConfig_AudioEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SuppressionConfig_AudioEncoding.Descriptor instead.
func (SuppressionConfig_AudioEncoding) EnumDescriptor() ([]byte, []int) {
	return file_sogou_speech_ns_v1_ns_proto_rawDescGZIP(), []int{2, 0}
}

// The top-level message sent by the client for the `StreamingSuppress` method.
// Multiple `StreamingSuppressRequest` messages are sent.
// The first message must contain a `streaming_config` message and must not contain `audio_content` data.
// All subsequent messages must contain `audio_content` data and must NOT contain a
// `streaming_config` message.
type StreamingSuppressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *Required* The streaming request, which is either a streaming config or audio content.
	//
	// Types that are assignable to StreamingRequest:
	//	*StreamingSuppressRequest_StreamingConfig
	//	*StreamingSuppressRequest_AudioContent
	StreamingRequest isStreamingSuppressRequest_StreamingRequest `protobuf_oneof:"streaming_request"`
	// *Optional* The sequence number of the request
	// It must be specified through all streaming requests including the config request
	// incremented by one each time, ** STARTING FROM 0 **
	RequestSequence uint64 `protobuf:"varint,3,opt,name=request_sequence,json=requestSequence,proto3" json:"request_sequence,omitempty"`
	// *Optional* The timestamp when the request will be sending
	RequestTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=request_time,json=requestTime,proto3" json:"request_time,omitempty"`
}

func (x *StreamingSuppressRequest) Reset() {
	*x = StreamingSuppressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sogou_speech_ns_v1_ns_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingSuppressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSuppressRequest) ProtoMessage() {}

func (x *StreamingSuppressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sogou_speech_ns_v1_ns_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSuppressRequest.ProtoReflect.Descriptor instead.
func (*StreamingSuppressRequest) Descriptor() ([]byte, []int) {
	return file_sogou_speech_ns_v1_ns_proto_rawDescGZIP(), []int{0}
}

func (m *StreamingSuppressRequest) GetStreamingRequest() isStreamingSuppressRequest_StreamingRequest {
	if m != nil {
		return m.StreamingRequest
	}
	return nil
}

func (x *StreamingSuppressRequest) GetStreamingConfig() *StreamingSuppressionConfig {
	if x, ok := x.GetStreamingRequest().(*StreamingSuppressRequest_StreamingConfig); ok {
		return x.StreamingConfig
	}
	return nil
}

func (x *StreamingSuppressRequest) GetAudioContent() []byte {
	if x, ok := x.GetStreamingRequest().(*StreamingSuppressRequest_AudioContent); ok {
		return x.AudioContent
	}
	return nil
}

func (x *StreamingSuppressRequest) GetRequestSequence() uint64 {
	if x != nil {
		return x.RequestSequence
	}
	return 0
}

func (x *StreamingSuppressRequest) GetRequestTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestTime
	}
	return nil
}

type isStreamingSuppressRequest_StreamingRequest interface {
	isStreamingSuppressRequest_StreamingRequest()
}

type StreamingSuppressRequest_StreamingConfig struct {
	// Provides information to the suppressor that specifies how to process the
	// request. The first `StreamingSuppressRequest` message must contain a
	// `streaming_config`  message.
	StreamingConfig *StreamingSuppressionConfig `protobuf:"bytes,1,opt,name=streaming_config,json=streamingConfig,proto3,oneof"`
}

type StreamingSuppressRequest_AudioContent struct {
	// The audio data to be suppressed. Sequential chunks of audio data are sent
	// in sequential `StreamingSuppressRequest` messages. The first
	// `StreamingSuppressRequest` message must not contain `audio_content` data
	// and all subsequent `StreamingSuppressRequest` messages must contain
	// `audio_content` data.
	AudioContent []byte `protobuf:"bytes,2,opt,name=audio_content,json=audioContent,proto3,oneof"`
}

func (*StreamingSuppressRequest_StreamingConfig) isStreamingSuppressRequest_StreamingRequest() {}

func (*StreamingSuppressRequest_AudioContent) isStreamingSuppressRequest_StreamingRequest() {}

// Provides information to the suppressor that specifies how to process the
// request.
type StreamingSuppressionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *Required* Provides information to the suppressor that specifies how to
	// process the request.
	Config *SuppressionConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// *Optional* If non-zero value specified, the audio_content of each
	// `StreamingSuppressionResult` in `StreamingSuppressResponse` will guaranteed to be
	// the specified bytes, except the last one.
	AudioContentBytesOfEachResponse int32 `protobuf:"varint,3,opt,name=audio_content_bytes_of_each_response,json=audioContentBytesOfEachResponse,proto3" json:"audio_content_bytes_of_each_response,omitempty"`
}

func (x *StreamingSuppressionConfig) Reset() {
	*x = StreamingSuppressionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sogou_speech_ns_v1_ns_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingSuppressionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSuppressionConfig) ProtoMessage() {}

func (x *StreamingSuppressionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sogou_speech_ns_v1_ns_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSuppressionConfig.ProtoReflect.Descriptor instead.
func (*StreamingSuppressionConfig) Descriptor() ([]byte, []int) {
	return file_sogou_speech_ns_v1_ns_proto_rawDescGZIP(), []int{1}
}

func (x *StreamingSuppressionConfig) GetConfig() *SuppressionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *StreamingSuppressionConfig) GetAudioContentBytesOfEachResponse() int32 {
	if x != nil {
		return x.AudioContentBytesOfEachResponse
	}
	return 0
}

// Provides information to the suppressor that specifies how to process the
// request.
type SuppressionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *Required* Encoding of audio data sent IN all suppression request messages.
	EncodingIn SuppressionConfig_AudioEncoding `protobuf:"varint,1,opt,name=encoding_in,json=encodingIn,proto3,enum=sogou.speech.ns.v1.SuppressionConfig_AudioEncoding" json:"encoding_in,omitempty"`
	// *Required* Expected encoding of audio data FROM all suppression response messages.
	EncodingOut SuppressionConfig_AudioEncoding `protobuf:"varint,2,opt,name=encoding_out,json=encodingOut,proto3,enum=sogou.speech.ns.v1.SuppressionConfig_AudioEncoding" json:"encoding_out,omitempty"`
	// *Optional* Which model to select for the given request. Select the model
	// best suited to your domain to get best results. If a model is not
	// explicitly specified, "default" model is used.
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// *Optional* Obfuscated ID of request, to identify number of unique requests using the service.
	Uid string `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *SuppressionConfig) Reset() {
	*x = SuppressionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sogou_speech_ns_v1_ns_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuppressionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuppressionConfig) ProtoMessage() {}

func (x *SuppressionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sogou_speech_ns_v1_ns_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuppressionConfig.ProtoReflect.Descriptor instead.
func (*SuppressionConfig) Descriptor() ([]byte, []int) {
	return file_sogou_speech_ns_v1_ns_proto_rawDescGZIP(), []int{2}
}

func (x *SuppressionConfig) GetEncodingIn() SuppressionConfig_AudioEncoding {
	if x != nil {
		return x.EncodingIn
	}
	return SuppressionConfig_ENCODING_UNSPECIFIED
}

func (x *SuppressionConfig) GetEncodingOut() SuppressionConfig_AudioEncoding {
	if x != nil {
		return x.EncodingOut
	}
	return SuppressionConfig_ENCODING_UNSPECIFIED
}

func (x *SuppressionConfig) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *SuppressionConfig) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// `StreamingSuppressResponse` is the only message returned to the client by
// `StreamingSuppress`. A series of zero or more `StreamingSuppressResponse`
// messages are streamed back to the client.
// Suppressed audio slice will be filled in each response.
type StreamingSuppressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *Output-only* If set, returns a [google.rpc.Status] message that
	// specifies the error for the operation.
	// NOTICE: this field is used for websocket / http2-multipart-stream protocol
	// to return error on the end of the response stream.
	// gRPC protocol will NEVER use it, it will return error status directly from method instead.
	Error *status.Status `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// *Output-only* This repeated list contains zero or more results that
	// correspond to consecutive portions of the audio currently being processed.
	Results []*StreamingSuppressionResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *StreamingSuppressResponse) Reset() {
	*x = StreamingSuppressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sogou_speech_ns_v1_ns_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingSuppressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSuppressResponse) ProtoMessage() {}

func (x *StreamingSuppressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sogou_speech_ns_v1_ns_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSuppressResponse.ProtoReflect.Descriptor instead.
func (*StreamingSuppressResponse) Descriptor() ([]byte, []int) {
	return file_sogou_speech_ns_v1_ns_proto_rawDescGZIP(), []int{3}
}

func (x *StreamingSuppressResponse) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *StreamingSuppressResponse) GetResults() []*StreamingSuppressionResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// A streaming suppression result corresponding to a portion of the audio
// that is currently being processed.
type StreamingSuppressionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *Output-only* a portion of the audio that is currently being processed.
	// It will be the encoding specified by corresponding request config.
	AudioContent []byte `protobuf:"bytes,1,opt,name=audio_content,json=audioContent,proto3" json:"audio_content,omitempty"`
	// *Optional* The sequence number of the response
	// It must be specified through all streaming results
	// incremented by one each time, ** STARTING FROM 1 **
	ResponseSequence uint64 `protobuf:"varint,3,opt,name=response_sequence,json=responseSequence,proto3" json:"response_sequence,omitempty"`
	// *Optional* The timestamp when the response will be sending
	ResponseTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=response_time,json=responseTime,proto3" json:"response_time,omitempty"`
}

func (x *StreamingSuppressionResult) Reset() {
	*x = StreamingSuppressionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sogou_speech_ns_v1_ns_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingSuppressionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSuppressionResult) ProtoMessage() {}

func (x *StreamingSuppressionResult) ProtoReflect() protoreflect.Message {
	mi := &file_sogou_speech_ns_v1_ns_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSuppressionResult.ProtoReflect.Descriptor instead.
func (*StreamingSuppressionResult) Descriptor() ([]byte, []int) {
	return file_sogou_speech_ns_v1_ns_proto_rawDescGZIP(), []int{4}
}

func (x *StreamingSuppressionResult) GetAudioContent() []byte {
	if x != nil {
		return x.AudioContent
	}
	return nil
}

func (x *StreamingSuppressionResult) GetResponseSequence() uint64 {
	if x != nil {
		return x.ResponseSequence
	}
	return 0
}

func (x *StreamingSuppressionResult) GetResponseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ResponseTime
	}
	return nil
}

var File_sogou_speech_ns_v1_ns_proto protoreflect.FileDescriptor

var file_sogou_speech_ns_v1_ns_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x6f, 0x67, 0x6f, 0x75, 0x2f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x6e,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73,
	0x6f, 0x67, 0x6f, 0x75, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x02, 0x0a, 0x18,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6f, 0x67, 0x6f, 0x75, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x1a,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6f, 0x67,
	0x6f, 0x75, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x24, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4f, 0x66, 0x45, 0x61, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x11, 0x53, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54,
	0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x73, 0x6f, 0x67, 0x6f, 0x75, 0x2e, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x12, 0x56, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x73, 0x6f, 0x67,
	0x6f, 0x75, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x31, 0x36, 0x10, 0x01, 0x22, 0x8f, 0x01,
	0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6f, 0x67, 0x6f, 0x75, 0x2e, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0xaf, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0x7a, 0x0a, 0x02, 0x6e, 0x73, 0x12, 0x74, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x2e, 0x73,
	0x6f, 0x67, 0x6f, 0x75, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x6f, 0x67,
	0x6f, 0x75, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x87, 0x01,
	0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x6f, 0x67, 0x6f, 0x75, 0x2e, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x07, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x25, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x73, 0x6f, 0x67, 0x6f, 0x75, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6e, 0x73, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x05,
	0x53, 0x50, 0x42, 0x4e, 0x53, 0xaa, 0x02, 0x12, 0x53, 0x6f, 0x67, 0x6f, 0x75, 0x2e, 0x53, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x4e, 0x53, 0x2e, 0x56, 0x31, 0xba, 0x02, 0x05, 0x53, 0x50, 0x42,
	0x4e, 0x53, 0xca, 0x02, 0x12, 0x53, 0x6f, 0x67, 0x6f, 0x75, 0x5c, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x5c, 0x4e, 0x53, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sogou_speech_ns_v1_ns_proto_rawDescOnce sync.Once
	file_sogou_speech_ns_v1_ns_proto_rawDescData = file_sogou_speech_ns_v1_ns_proto_rawDesc
)

func file_sogou_speech_ns_v1_ns_proto_rawDescGZIP() []byte {
	file_sogou_speech_ns_v1_ns_proto_rawDescOnce.Do(func() {
		file_sogou_speech_ns_v1_ns_proto_rawDescData = protoimpl.X.CompressGZIP(file_sogou_speech_ns_v1_ns_proto_rawDescData)
	})
	return file_sogou_speech_ns_v1_ns_proto_rawDescData
}

var file_sogou_speech_ns_v1_ns_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sogou_speech_ns_v1_ns_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_sogou_speech_ns_v1_ns_proto_goTypes = []interface{}{
	(SuppressionConfig_AudioEncoding)(0), // 0: sogou.speech.ns.v1.SuppressionConfig.AudioEncoding
	(*StreamingSuppressRequest)(nil),     // 1: sogou.speech.ns.v1.StreamingSuppressRequest
	(*StreamingSuppressionConfig)(nil),   // 2: sogou.speech.ns.v1.StreamingSuppressionConfig
	(*SuppressionConfig)(nil),            // 3: sogou.speech.ns.v1.SuppressionConfig
	(*StreamingSuppressResponse)(nil),    // 4: sogou.speech.ns.v1.StreamingSuppressResponse
	(*StreamingSuppressionResult)(nil),   // 5: sogou.speech.ns.v1.StreamingSuppressionResult
	(*timestamppb.Timestamp)(nil),        // 6: google.protobuf.Timestamp
	(*status.Status)(nil),                // 7: google.rpc.Status
}
var file_sogou_speech_ns_v1_ns_proto_depIdxs = []int32{
	2, // 0: sogou.speech.ns.v1.StreamingSuppressRequest.streaming_config:type_name -> sogou.speech.ns.v1.StreamingSuppressionConfig
	6, // 1: sogou.speech.ns.v1.StreamingSuppressRequest.request_time:type_name -> google.protobuf.Timestamp
	3, // 2: sogou.speech.ns.v1.StreamingSuppressionConfig.config:type_name -> sogou.speech.ns.v1.SuppressionConfig
	0, // 3: sogou.speech.ns.v1.SuppressionConfig.encoding_in:type_name -> sogou.speech.ns.v1.SuppressionConfig.AudioEncoding
	0, // 4: sogou.speech.ns.v1.SuppressionConfig.encoding_out:type_name -> sogou.speech.ns.v1.SuppressionConfig.AudioEncoding
	7, // 5: sogou.speech.ns.v1.StreamingSuppressResponse.error:type_name -> google.rpc.Status
	5, // 6: sogou.speech.ns.v1.StreamingSuppressResponse.results:type_name -> sogou.speech.ns.v1.StreamingSuppressionResult
	6, // 7: sogou.speech.ns.v1.StreamingSuppressionResult.response_time:type_name -> google.protobuf.Timestamp
	1, // 8: sogou.speech.ns.v1.ns.StreamingSuppress:input_type -> sogou.speech.ns.v1.StreamingSuppressRequest
	4, // 9: sogou.speech.ns.v1.ns.StreamingSuppress:output_type -> sogou.speech.ns.v1.StreamingSuppressResponse
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_sogou_speech_ns_v1_ns_proto_init() }
func file_sogou_speech_ns_v1_ns_proto_init() {
	if File_sogou_speech_ns_v1_ns_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sogou_speech_ns_v1_ns_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingSuppressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sogou_speech_ns_v1_ns_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingSuppressionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sogou_speech_ns_v1_ns_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuppressionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sogou_speech_ns_v1_ns_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingSuppressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sogou_speech_ns_v1_ns_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingSuppressionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sogou_speech_ns_v1_ns_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*StreamingSuppressRequest_StreamingConfig)(nil),
		(*StreamingSuppressRequest_AudioContent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sogou_speech_ns_v1_ns_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sogou_speech_ns_v1_ns_proto_goTypes,
		DependencyIndexes: file_sogou_speech_ns_v1_ns_proto_depIdxs,
		EnumInfos:         file_sogou_speech_ns_v1_ns_proto_enumTypes,
		MessageInfos:      file_sogou_speech_ns_v1_ns_proto_msgTypes,
	}.Build()
	File_sogou_speech_ns_v1_ns_proto = out.File
	file_sogou_speech_ns_v1_ns_proto_rawDesc = nil
	file_sogou_speech_ns_v1_ns_proto_goTypes = nil
	file_sogou_speech_ns_v1_ns_proto_depIdxs = nil
}
