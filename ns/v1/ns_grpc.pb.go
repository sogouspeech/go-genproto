// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ns

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NsClient is the client API for Ns service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NsClient interface {
	StreamingSuppress(ctx context.Context, opts ...grpc.CallOption) (Ns_StreamingSuppressClient, error)
}

type nsClient struct {
	cc grpc.ClientConnInterface
}

func NewNsClient(cc grpc.ClientConnInterface) NsClient {
	return &nsClient{cc}
}

func (c *nsClient) StreamingSuppress(ctx context.Context, opts ...grpc.CallOption) (Ns_StreamingSuppressClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ns_ServiceDesc.Streams[0], "/sogou.speech.ns.v1.ns/StreamingSuppress", opts...)
	if err != nil {
		return nil, err
	}
	x := &nsStreamingSuppressClient{stream}
	return x, nil
}

type Ns_StreamingSuppressClient interface {
	Send(*StreamingSuppressRequest) error
	Recv() (*StreamingSuppressResponse, error)
	grpc.ClientStream
}

type nsStreamingSuppressClient struct {
	grpc.ClientStream
}

func (x *nsStreamingSuppressClient) Send(m *StreamingSuppressRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nsStreamingSuppressClient) Recv() (*StreamingSuppressResponse, error) {
	m := new(StreamingSuppressResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NsServer is the server API for Ns service.
// All implementations must embed UnimplementedNsServer
// for forward compatibility
type NsServer interface {
	StreamingSuppress(Ns_StreamingSuppressServer) error
	mustEmbedUnimplementedNsServer()
}

// UnimplementedNsServer must be embedded to have forward compatible implementations.
type UnimplementedNsServer struct {
}

func (UnimplementedNsServer) StreamingSuppress(Ns_StreamingSuppressServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingSuppress not implemented")
}
func (UnimplementedNsServer) mustEmbedUnimplementedNsServer() {}

// UnsafeNsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NsServer will
// result in compilation errors.
type UnsafeNsServer interface {
	mustEmbedUnimplementedNsServer()
}

func RegisterNsServer(s grpc.ServiceRegistrar, srv NsServer) {
	s.RegisterService(&Ns_ServiceDesc, srv)
}

func _Ns_StreamingSuppress_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NsServer).StreamingSuppress(&nsStreamingSuppressServer{stream})
}

type Ns_StreamingSuppressServer interface {
	Send(*StreamingSuppressResponse) error
	Recv() (*StreamingSuppressRequest, error)
	grpc.ServerStream
}

type nsStreamingSuppressServer struct {
	grpc.ServerStream
}

func (x *nsStreamingSuppressServer) Send(m *StreamingSuppressResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nsStreamingSuppressServer) Recv() (*StreamingSuppressRequest, error) {
	m := new(StreamingSuppressRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Ns_ServiceDesc is the grpc.ServiceDesc for Ns service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ns_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sogou.speech.ns.v1.ns",
	HandlerType: (*NsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingSuppress",
			Handler:       _Ns_StreamingSuppress_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sogou/speech/ns/v1/ns.proto",
}
