// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package asr

import (
	context "context"
	longrunning "golang.speech.sogou.com/apis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AsrClient is the client API for Asr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AsrClient interface {
	// Performs synchronous speech recognition: receive results after all audio
	// has been sent and processed.
	Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognizeResponse, error)
	// Performs asynchronous speech recognition: receive results via sogou.speech.longrunning.GetOperation interface
	LongRunningRecognize(ctx context.Context, in *LongRunningRecognizeRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Performs bidirectional streaming speech recognition: receive results while
	// sending audio. This method is only available via the gRPC API (not REST).
	StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (Asr_StreamingRecognizeClient, error)
}

type asrClient struct {
	cc grpc.ClientConnInterface
}

func NewAsrClient(cc grpc.ClientConnInterface) AsrClient {
	return &asrClient{cc}
}

func (c *asrClient) Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognizeResponse, error) {
	out := new(RecognizeResponse)
	err := c.cc.Invoke(ctx, "/sogou.speech.asr.v1.asr/Recognize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrClient) LongRunningRecognize(ctx context.Context, in *LongRunningRecognizeRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/sogou.speech.asr.v1.asr/LongRunningRecognize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrClient) StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (Asr_StreamingRecognizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Asr_serviceDesc.Streams[0], "/sogou.speech.asr.v1.asr/StreamingRecognize", opts...)
	if err != nil {
		return nil, err
	}
	x := &asrStreamingRecognizeClient{stream}
	return x, nil
}

type Asr_StreamingRecognizeClient interface {
	Send(*StreamingRecognizeRequest) error
	Recv() (*StreamingRecognizeResponse, error)
	grpc.ClientStream
}

type asrStreamingRecognizeClient struct {
	grpc.ClientStream
}

func (x *asrStreamingRecognizeClient) Send(m *StreamingRecognizeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *asrStreamingRecognizeClient) Recv() (*StreamingRecognizeResponse, error) {
	m := new(StreamingRecognizeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AsrServer is the server API for Asr service.
// All implementations must embed UnimplementedAsrServer
// for forward compatibility
type AsrServer interface {
	// Performs synchronous speech recognition: receive results after all audio
	// has been sent and processed.
	Recognize(context.Context, *RecognizeRequest) (*RecognizeResponse, error)
	// Performs asynchronous speech recognition: receive results via sogou.speech.longrunning.GetOperation interface
	LongRunningRecognize(context.Context, *LongRunningRecognizeRequest) (*longrunning.Operation, error)
	// Performs bidirectional streaming speech recognition: receive results while
	// sending audio. This method is only available via the gRPC API (not REST).
	StreamingRecognize(Asr_StreamingRecognizeServer) error
	mustEmbedUnimplementedAsrServer()
}

// UnimplementedAsrServer must be embedded to have forward compatible implementations.
type UnimplementedAsrServer struct {
}

func (UnimplementedAsrServer) Recognize(context.Context, *RecognizeRequest) (*RecognizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recognize not implemented")
}
func (UnimplementedAsrServer) LongRunningRecognize(context.Context, *LongRunningRecognizeRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LongRunningRecognize not implemented")
}
func (UnimplementedAsrServer) StreamingRecognize(Asr_StreamingRecognizeServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingRecognize not implemented")
}
func (UnimplementedAsrServer) mustEmbedUnimplementedAsrServer() {}

// UnsafeAsrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsrServer will
// result in compilation errors.
type UnsafeAsrServer interface {
	mustEmbedUnimplementedAsrServer()
}

func RegisterAsrServer(s grpc.ServiceRegistrar, srv AsrServer) {
	s.RegisterService(&_Asr_serviceDesc, srv)
}

func _Asr_Recognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrServer).Recognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sogou.speech.asr.v1.asr/Recognize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrServer).Recognize(ctx, req.(*RecognizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asr_LongRunningRecognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LongRunningRecognizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrServer).LongRunningRecognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sogou.speech.asr.v1.asr/LongRunningRecognize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrServer).LongRunningRecognize(ctx, req.(*LongRunningRecognizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asr_StreamingRecognize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AsrServer).StreamingRecognize(&asrStreamingRecognizeServer{stream})
}

type Asr_StreamingRecognizeServer interface {
	Send(*StreamingRecognizeResponse) error
	Recv() (*StreamingRecognizeRequest, error)
	grpc.ServerStream
}

type asrStreamingRecognizeServer struct {
	grpc.ServerStream
}

func (x *asrStreamingRecognizeServer) Send(m *StreamingRecognizeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *asrStreamingRecognizeServer) Recv() (*StreamingRecognizeRequest, error) {
	m := new(StreamingRecognizeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Asr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sogou.speech.asr.v1.asr",
	HandlerType: (*AsrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recognize",
			Handler:    _Asr_Recognize_Handler,
		},
		{
			MethodName: "LongRunningRecognize",
			Handler:    _Asr_LongRunningRecognize_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingRecognize",
			Handler:       _Asr_StreamingRecognize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sogou/speech/asr/v1/asr.proto",
}
