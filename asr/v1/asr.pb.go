// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sogou/speech/asr/v1/asr.proto

package asr // import "golang.speech.sogou.com/apis/asr/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"
import duration "github.com/golang/protobuf/ptypes/duration"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import longrunning "golang.speech.sogou.com/apis/longrunning"
import status "google.golang.org/genproto/googleapis/rpc/status"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Audio encoding of the data sent in the audio message. All encodings support
// only 1 channel (mono) audio. Only `FLAC` include a header that
// describes the bytes of audio that follow the header. The other encodings
// are raw audio bytes with no header.
//
// For best results, the audio source should be captured and transmitted using
// a lossless encoding (`FLAC` or `LINEAR16`). Recognition accuracy may be
// reduced if lossy codecs, which include the other codecs listed in
// this section, are used to capture or transmit the audio, particularly if
// background noise is present.
type RecognitionConfig_AudioEncoding int32

const (
	// Not specified. Will return result status 400.
	RecognitionConfig_ENCODING_UNSPECIFIED RecognitionConfig_AudioEncoding = 0
	// Uncompressed 16-bit signed little-endian samples (Linear PCM).
	RecognitionConfig_LINEAR16 RecognitionConfig_AudioEncoding = 1
	// [`FLAC`](https://xiph.org/flac/documentation.html) (Free Lossless Audio
	// Codec) is the recommended encoding because it is
	// lossless--therefore recognition is not compromised--and
	// requires only about half the bandwidth of `LINEAR16`. `FLAC` stream
	// encoding only supports 16-bit samples, however, not all fields in
	// `STREAMINFO` are supported.
	RecognitionConfig_FLAC RecognitionConfig_AudioEncoding = 2
	// Sogou specific speex format 16-bit samples 1 channel
	RecognitionConfig_SOGOU_SPEEX RecognitionConfig_AudioEncoding = 100
)

var RecognitionConfig_AudioEncoding_name = map[int32]string{
	0:   "ENCODING_UNSPECIFIED",
	1:   "LINEAR16",
	2:   "FLAC",
	100: "SOGOU_SPEEX",
}
var RecognitionConfig_AudioEncoding_value = map[string]int32{
	"ENCODING_UNSPECIFIED": 0,
	"LINEAR16":             1,
	"FLAC":                 2,
	"SOGOU_SPEEX":          100,
}

func (x RecognitionConfig_AudioEncoding) String() string {
	return proto.EnumName(RecognitionConfig_AudioEncoding_name, int32(x))
}
func (RecognitionConfig_AudioEncoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{4, 0}
}

// Indicates the type of speech event.
type StreamingRecognizeResponse_SpeechEventType int32

const (
	// No speech event specified.
	StreamingRecognizeResponse_SPEECH_EVENT_UNSPECIFIED StreamingRecognizeResponse_SpeechEventType = 0
	// This event indicates that the server has detected the end of the user's
	// speech utterance and expects no additional speech. Therefore, the server
	// will not process additional audio (although it may subsequently return
	// additional results). The client should stop sending additional audio
	// data, half-close the gRPC connection, and wait for any additional results
	// until the server closes the gRPC connection. This event is only sent if
	// `single_utterance` was set to `true`, and is not used otherwise.
	StreamingRecognizeResponse_END_OF_SINGLE_UTTERANCE StreamingRecognizeResponse_SpeechEventType = 1
)

var StreamingRecognizeResponse_SpeechEventType_name = map[int32]string{
	0: "SPEECH_EVENT_UNSPECIFIED",
	1: "END_OF_SINGLE_UTTERANCE",
}
var StreamingRecognizeResponse_SpeechEventType_value = map[string]int32{
	"SPEECH_EVENT_UNSPECIFIED": 0,
	"END_OF_SINGLE_UTTERANCE":  1,
}

func (x StreamingRecognizeResponse_SpeechEventType) String() string {
	return proto.EnumName(StreamingRecognizeResponse_SpeechEventType_name, int32(x))
}
func (StreamingRecognizeResponse_SpeechEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{10, 0}
}

// The top-level message sent by the client for the `Recognize` method.
type RecognizeRequest struct {
	// *Required* Provides information to the recognizer that specifies how to
	// process the request.
	Config *RecognitionConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// *Required* The audio data to be recognized.
	Audio                *RecognitionAudio `protobuf:"bytes,2,opt,name=audio,proto3" json:"audio,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RecognizeRequest) Reset()         { *m = RecognizeRequest{} }
func (m *RecognizeRequest) String() string { return proto.CompactTextString(m) }
func (*RecognizeRequest) ProtoMessage()    {}
func (*RecognizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{0}
}
func (m *RecognizeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecognizeRequest.Unmarshal(m, b)
}
func (m *RecognizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecognizeRequest.Marshal(b, m, deterministic)
}
func (dst *RecognizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecognizeRequest.Merge(dst, src)
}
func (m *RecognizeRequest) XXX_Size() int {
	return xxx_messageInfo_RecognizeRequest.Size(m)
}
func (m *RecognizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecognizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecognizeRequest proto.InternalMessageInfo

func (m *RecognizeRequest) GetConfig() *RecognitionConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *RecognizeRequest) GetAudio() *RecognitionAudio {
	if m != nil {
		return m.Audio
	}
	return nil
}

// The top-level message sent by the client for the `LongRunningRecognize`
// method.
type LongRunningRecognizeRequest struct {
	// *Required* Provides information to the recognizer that specifies how to
	// process the request.
	Config *RecognitionConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// *Required* The audio data to be recognized.
	Audio                *RecognitionAudio `protobuf:"bytes,2,opt,name=audio,proto3" json:"audio,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LongRunningRecognizeRequest) Reset()         { *m = LongRunningRecognizeRequest{} }
func (m *LongRunningRecognizeRequest) String() string { return proto.CompactTextString(m) }
func (*LongRunningRecognizeRequest) ProtoMessage()    {}
func (*LongRunningRecognizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{1}
}
func (m *LongRunningRecognizeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LongRunningRecognizeRequest.Unmarshal(m, b)
}
func (m *LongRunningRecognizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LongRunningRecognizeRequest.Marshal(b, m, deterministic)
}
func (dst *LongRunningRecognizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LongRunningRecognizeRequest.Merge(dst, src)
}
func (m *LongRunningRecognizeRequest) XXX_Size() int {
	return xxx_messageInfo_LongRunningRecognizeRequest.Size(m)
}
func (m *LongRunningRecognizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LongRunningRecognizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LongRunningRecognizeRequest proto.InternalMessageInfo

func (m *LongRunningRecognizeRequest) GetConfig() *RecognitionConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *LongRunningRecognizeRequest) GetAudio() *RecognitionAudio {
	if m != nil {
		return m.Audio
	}
	return nil
}

// The top-level message sent by the client for the `StreamingRecognize` method.
// Multiple `StreamingRecognizeRequest` messages are sent. The first message
// must contain a `streaming_config` message and must not contain `audio` data.
// All subsequent messages must contain `audio` data and must not contain a
// `streaming_config` message.
type StreamingRecognizeRequest struct {
	// The streaming request, which is either a streaming config or audio content.
	//
	// Types that are valid to be assigned to StreamingRequest:
	//	*StreamingRecognizeRequest_StreamingConfig
	//	*StreamingRecognizeRequest_AudioContent
	StreamingRequest     isStreamingRecognizeRequest_StreamingRequest `protobuf_oneof:"streaming_request"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *StreamingRecognizeRequest) Reset()         { *m = StreamingRecognizeRequest{} }
func (m *StreamingRecognizeRequest) String() string { return proto.CompactTextString(m) }
func (*StreamingRecognizeRequest) ProtoMessage()    {}
func (*StreamingRecognizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{2}
}
func (m *StreamingRecognizeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingRecognizeRequest.Unmarshal(m, b)
}
func (m *StreamingRecognizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingRecognizeRequest.Marshal(b, m, deterministic)
}
func (dst *StreamingRecognizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingRecognizeRequest.Merge(dst, src)
}
func (m *StreamingRecognizeRequest) XXX_Size() int {
	return xxx_messageInfo_StreamingRecognizeRequest.Size(m)
}
func (m *StreamingRecognizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingRecognizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingRecognizeRequest proto.InternalMessageInfo

type isStreamingRecognizeRequest_StreamingRequest interface {
	isStreamingRecognizeRequest_StreamingRequest()
}

type StreamingRecognizeRequest_StreamingConfig struct {
	StreamingConfig *StreamingRecognitionConfig `protobuf:"bytes,1,opt,name=streaming_config,json=streamingConfig,proto3,oneof"`
}

type StreamingRecognizeRequest_AudioContent struct {
	AudioContent []byte `protobuf:"bytes,2,opt,name=audio_content,json=audioContent,proto3,oneof"`
}

func (*StreamingRecognizeRequest_StreamingConfig) isStreamingRecognizeRequest_StreamingRequest() {}

func (*StreamingRecognizeRequest_AudioContent) isStreamingRecognizeRequest_StreamingRequest() {}

func (m *StreamingRecognizeRequest) GetStreamingRequest() isStreamingRecognizeRequest_StreamingRequest {
	if m != nil {
		return m.StreamingRequest
	}
	return nil
}

func (m *StreamingRecognizeRequest) GetStreamingConfig() *StreamingRecognitionConfig {
	if x, ok := m.GetStreamingRequest().(*StreamingRecognizeRequest_StreamingConfig); ok {
		return x.StreamingConfig
	}
	return nil
}

func (m *StreamingRecognizeRequest) GetAudioContent() []byte {
	if x, ok := m.GetStreamingRequest().(*StreamingRecognizeRequest_AudioContent); ok {
		return x.AudioContent
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamingRecognizeRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamingRecognizeRequest_OneofMarshaler, _StreamingRecognizeRequest_OneofUnmarshaler, _StreamingRecognizeRequest_OneofSizer, []interface{}{
		(*StreamingRecognizeRequest_StreamingConfig)(nil),
		(*StreamingRecognizeRequest_AudioContent)(nil),
	}
}

func _StreamingRecognizeRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamingRecognizeRequest)
	// streaming_request
	switch x := m.StreamingRequest.(type) {
	case *StreamingRecognizeRequest_StreamingConfig:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StreamingConfig); err != nil {
			return err
		}
	case *StreamingRecognizeRequest_AudioContent:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.AudioContent)
	case nil:
	default:
		return fmt.Errorf("StreamingRecognizeRequest.StreamingRequest has unexpected type %T", x)
	}
	return nil
}

func _StreamingRecognizeRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamingRecognizeRequest)
	switch tag {
	case 1: // streaming_request.streaming_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StreamingRecognitionConfig)
		err := b.DecodeMessage(msg)
		m.StreamingRequest = &StreamingRecognizeRequest_StreamingConfig{msg}
		return true, err
	case 2: // streaming_request.audio_content
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.StreamingRequest = &StreamingRecognizeRequest_AudioContent{x}
		return true, err
	default:
		return false, nil
	}
}

func _StreamingRecognizeRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamingRecognizeRequest)
	// streaming_request
	switch x := m.StreamingRequest.(type) {
	case *StreamingRecognizeRequest_StreamingConfig:
		s := proto.Size(x.StreamingConfig)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingRecognizeRequest_AudioContent:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.AudioContent)))
		n += len(x.AudioContent)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Provides information to the recognizer that specifies how to process the
// request.
type StreamingRecognitionConfig struct {
	// *Required* Provides information to the recognizer that specifies how to
	// process the request.
	Config *RecognitionConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// *Optional* If `false` or omitted, the recognizer will perform continuous
	// recognition (continuing to wait for and process audio even if the user
	// pauses speaking) until the client closes the input stream (gRPC API) or
	// until the maximum time limit has been reached. May return multiple
	// `StreamingRecognitionResult`s with the `is_final` flag set to `true`.
	//
	// If `true`, the recognizer will detect a single spoken utterance. When it
	// detects that the user has paused or stopped speaking, it will return an
	// `END_OF_SINGLE_UTTERANCE` event and cease recognition. It will return no
	// more than one `StreamingRecognitionResult` with the `is_final` flag set to
	// `true`.
	SingleUtterance bool `protobuf:"varint,2,opt,name=single_utterance,json=singleUtterance,proto3" json:"single_utterance,omitempty"`
	// *Optional* If `true`, interim results (tentative hypotheses) may be
	// returned as they become available (these interim results are indicated with
	// the `is_final=false` flag).
	// If `false` or omitted, only `is_final=true` result(s) are returned.
	InterimResults bool `protobuf:"varint,3,opt,name=interim_results,json=interimResults,proto3" json:"interim_results,omitempty"`
	// *Optional* If `true`, adds punctuation to interim recognition result hypotheses.
	// available only if RecognitionConfig.disable_automatic_punctuation = false AND interim_results = true
	//
	// NOTE: premium features.
	EnableInterimResultsPunctuation bool `protobuf:"varint,4,opt,name=enable_interim_results_punctuation,json=enableInterimResultsPunctuation,proto3" json:"enable_interim_results_punctuation,omitempty"`
	// *Optional* similar to `single_utterance`. But if `true`,
	// the recognizer will NOT detect any single spoken utterance
	// until the client closes the input stream (gRPC API) or
	// until the maximum time limit has been reached (approximately 30 seconds).
	// It will return only one `StreamingRecognitionResult`s with the `is_final` set to `true`
	// with an `END_OF_SINGLE_UTTERANCE` event and cease recognition.
	MergeUtterance       bool     `protobuf:"varint,5,opt,name=merge_utterance,json=mergeUtterance,proto3" json:"merge_utterance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamingRecognitionConfig) Reset()         { *m = StreamingRecognitionConfig{} }
func (m *StreamingRecognitionConfig) String() string { return proto.CompactTextString(m) }
func (*StreamingRecognitionConfig) ProtoMessage()    {}
func (*StreamingRecognitionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{3}
}
func (m *StreamingRecognitionConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingRecognitionConfig.Unmarshal(m, b)
}
func (m *StreamingRecognitionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingRecognitionConfig.Marshal(b, m, deterministic)
}
func (dst *StreamingRecognitionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingRecognitionConfig.Merge(dst, src)
}
func (m *StreamingRecognitionConfig) XXX_Size() int {
	return xxx_messageInfo_StreamingRecognitionConfig.Size(m)
}
func (m *StreamingRecognitionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingRecognitionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingRecognitionConfig proto.InternalMessageInfo

func (m *StreamingRecognitionConfig) GetConfig() *RecognitionConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *StreamingRecognitionConfig) GetSingleUtterance() bool {
	if m != nil {
		return m.SingleUtterance
	}
	return false
}

func (m *StreamingRecognitionConfig) GetInterimResults() bool {
	if m != nil {
		return m.InterimResults
	}
	return false
}

func (m *StreamingRecognitionConfig) GetEnableInterimResultsPunctuation() bool {
	if m != nil {
		return m.EnableInterimResultsPunctuation
	}
	return false
}

func (m *StreamingRecognitionConfig) GetMergeUtterance() bool {
	if m != nil {
		return m.MergeUtterance
	}
	return false
}

// Provides information to the recognizer that specifies how to process the
// request.
type RecognitionConfig struct {
	// *Required* Encoding of audio data sent in all `RecognitionAudio` messages.
	Encoding RecognitionConfig_AudioEncoding `protobuf:"varint,1,opt,name=encoding,proto3,enum=sogou.speech.asr.v1.RecognitionConfig_AudioEncoding" json:"encoding,omitempty"`
	// *Required* Sample rate in Hertz of the audio data sent in all
	// `RecognitionAudio` messages. Valid values are only: 16000.
	SampleRateHertz int32 `protobuf:"varint,2,opt,name=sample_rate_hertz,json=sampleRateHertz,proto3" json:"sample_rate_hertz,omitempty"`
	// *Required* The language code of the supplied audio.
	// Example: "zh-cmn-Hans-CN".
	// See [Language Support](https://docs.speech.sogou.com/docs/asr/resources/languages) for a list of the currently supported language codes.
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// *Optional* Maximum number of recognition hypotheses to be returned.
	// Specifically, the maximum number of `SpeechRecognitionAlternative` messages
	// within each `SpeechRecognitionResult`.
	// The server may return fewer than `max_alternatives`.
	// Valid values are `0`-`5`. A value of `0` or `1` will return 1.
	// If omitted, will return 1.
	MaxAlternatives int32 `protobuf:"varint,4,opt,name=max_alternatives,json=maxAlternatives,proto3" json:"max_alternatives,omitempty"`
	// *Optional* If set to `true`, the server will attempt to filter out
	// profanities
	ProfanityFilter bool `protobuf:"varint,5,opt,name=profanity_filter,json=profanityFilter,proto3" json:"profanity_filter,omitempty"`
	// *Optional* A means to provide context to assist the speech recognition.
	SpeechContexts []*SpeechContext `protobuf:"bytes,6,rep,name=speech_contexts,json=speechContexts,proto3" json:"speech_contexts,omitempty"`
	// *Optional* If `true`, the top result includes a list of words and
	// the start and end time offsets (timestamps) for those words. If
	// `false`, no word-level time offset information is returned. The default is
	// `false`.
	EnableWordTimeOffsets bool `protobuf:"varint,8,opt,name=enable_word_time_offsets,json=enableWordTimeOffsets,proto3" json:"enable_word_time_offsets,omitempty"`
	// *Optional* If 'true', stop adds punctuation to recognition result hypotheses.
	// The default 'false' value DOES add punctuation to result hypotheses.
	DisableAutomaticPunctuation bool `protobuf:"varint,11,opt,name=disable_automatic_punctuation,json=disableAutomaticPunctuation,proto3" json:"disable_automatic_punctuation,omitempty"`
	// *Optional* Which model to select for the given request. Select the model
	// best suited to your domain to get best results. If a model is not
	// explicitly specified, "default" model is used.
	Model string `protobuf:"bytes,13,opt,name=model,proto3" json:"model,omitempty"`
	// *Optional* Configuration for some specific scenarios
	ExtraConfigs         []*any.Any `protobuf:"bytes,20,rep,name=extra_configs,json=extraConfigs,proto3" json:"extra_configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RecognitionConfig) Reset()         { *m = RecognitionConfig{} }
func (m *RecognitionConfig) String() string { return proto.CompactTextString(m) }
func (*RecognitionConfig) ProtoMessage()    {}
func (*RecognitionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{4}
}
func (m *RecognitionConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecognitionConfig.Unmarshal(m, b)
}
func (m *RecognitionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecognitionConfig.Marshal(b, m, deterministic)
}
func (dst *RecognitionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecognitionConfig.Merge(dst, src)
}
func (m *RecognitionConfig) XXX_Size() int {
	return xxx_messageInfo_RecognitionConfig.Size(m)
}
func (m *RecognitionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RecognitionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RecognitionConfig proto.InternalMessageInfo

func (m *RecognitionConfig) GetEncoding() RecognitionConfig_AudioEncoding {
	if m != nil {
		return m.Encoding
	}
	return RecognitionConfig_ENCODING_UNSPECIFIED
}

func (m *RecognitionConfig) GetSampleRateHertz() int32 {
	if m != nil {
		return m.SampleRateHertz
	}
	return 0
}

func (m *RecognitionConfig) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func (m *RecognitionConfig) GetMaxAlternatives() int32 {
	if m != nil {
		return m.MaxAlternatives
	}
	return 0
}

func (m *RecognitionConfig) GetProfanityFilter() bool {
	if m != nil {
		return m.ProfanityFilter
	}
	return false
}

func (m *RecognitionConfig) GetSpeechContexts() []*SpeechContext {
	if m != nil {
		return m.SpeechContexts
	}
	return nil
}

func (m *RecognitionConfig) GetEnableWordTimeOffsets() bool {
	if m != nil {
		return m.EnableWordTimeOffsets
	}
	return false
}

func (m *RecognitionConfig) GetDisableAutomaticPunctuation() bool {
	if m != nil {
		return m.DisableAutomaticPunctuation
	}
	return false
}

func (m *RecognitionConfig) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *RecognitionConfig) GetExtraConfigs() []*any.Any {
	if m != nil {
		return m.ExtraConfigs
	}
	return nil
}

// Provides "hints" to the speech recognizer to favor specific words and phrases
// in the results.
type SpeechContext struct {
	// *Optional* A list of strings containing words and phrases "hints" so that
	// the speech recognition is more likely to recognize them. This can be used
	// to improve the accuracy for specific words and phrases, for example, if
	// specific commands are typically spoken by the user. This can also be used
	// to add additional words to the vocabulary of the recognizer. See [usage limits]
	Phrases              []string `protobuf:"bytes,1,rep,name=phrases,proto3" json:"phrases,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpeechContext) Reset()         { *m = SpeechContext{} }
func (m *SpeechContext) String() string { return proto.CompactTextString(m) }
func (*SpeechContext) ProtoMessage()    {}
func (*SpeechContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{5}
}
func (m *SpeechContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpeechContext.Unmarshal(m, b)
}
func (m *SpeechContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpeechContext.Marshal(b, m, deterministic)
}
func (dst *SpeechContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpeechContext.Merge(dst, src)
}
func (m *SpeechContext) XXX_Size() int {
	return xxx_messageInfo_SpeechContext.Size(m)
}
func (m *SpeechContext) XXX_DiscardUnknown() {
	xxx_messageInfo_SpeechContext.DiscardUnknown(m)
}

var xxx_messageInfo_SpeechContext proto.InternalMessageInfo

func (m *SpeechContext) GetPhrases() []string {
	if m != nil {
		return m.Phrases
	}
	return nil
}

// Contains audio data in the encoding specified in the `RecognitionConfig`.
// Either `content` or `uri` must be supplied. Supplying both or neither
// returns [google.rpc.Code.INVALID_ARGUMENT].
type RecognitionAudio struct {
	// The audio source, which is either inline content or a uri.
	//
	// Types that are valid to be assigned to AudioSource:
	//	*RecognitionAudio_Content
	//	*RecognitionAudio_Uri
	AudioSource          isRecognitionAudio_AudioSource `protobuf_oneof:"audio_source"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *RecognitionAudio) Reset()         { *m = RecognitionAudio{} }
func (m *RecognitionAudio) String() string { return proto.CompactTextString(m) }
func (*RecognitionAudio) ProtoMessage()    {}
func (*RecognitionAudio) Descriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{6}
}
func (m *RecognitionAudio) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecognitionAudio.Unmarshal(m, b)
}
func (m *RecognitionAudio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecognitionAudio.Marshal(b, m, deterministic)
}
func (dst *RecognitionAudio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecognitionAudio.Merge(dst, src)
}
func (m *RecognitionAudio) XXX_Size() int {
	return xxx_messageInfo_RecognitionAudio.Size(m)
}
func (m *RecognitionAudio) XXX_DiscardUnknown() {
	xxx_messageInfo_RecognitionAudio.DiscardUnknown(m)
}

var xxx_messageInfo_RecognitionAudio proto.InternalMessageInfo

type isRecognitionAudio_AudioSource interface {
	isRecognitionAudio_AudioSource()
}

type RecognitionAudio_Content struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3,oneof"`
}

type RecognitionAudio_Uri struct {
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3,oneof"`
}

func (*RecognitionAudio_Content) isRecognitionAudio_AudioSource() {}

func (*RecognitionAudio_Uri) isRecognitionAudio_AudioSource() {}

func (m *RecognitionAudio) GetAudioSource() isRecognitionAudio_AudioSource {
	if m != nil {
		return m.AudioSource
	}
	return nil
}

func (m *RecognitionAudio) GetContent() []byte {
	if x, ok := m.GetAudioSource().(*RecognitionAudio_Content); ok {
		return x.Content
	}
	return nil
}

func (m *RecognitionAudio) GetUri() string {
	if x, ok := m.GetAudioSource().(*RecognitionAudio_Uri); ok {
		return x.Uri
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RecognitionAudio) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RecognitionAudio_OneofMarshaler, _RecognitionAudio_OneofUnmarshaler, _RecognitionAudio_OneofSizer, []interface{}{
		(*RecognitionAudio_Content)(nil),
		(*RecognitionAudio_Uri)(nil),
	}
}

func _RecognitionAudio_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RecognitionAudio)
	// audio_source
	switch x := m.AudioSource.(type) {
	case *RecognitionAudio_Content:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Content)
	case *RecognitionAudio_Uri:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Uri)
	case nil:
	default:
		return fmt.Errorf("RecognitionAudio.AudioSource has unexpected type %T", x)
	}
	return nil
}

func _RecognitionAudio_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RecognitionAudio)
	switch tag {
	case 1: // audio_source.content
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.AudioSource = &RecognitionAudio_Content{x}
		return true, err
	case 2: // audio_source.uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.AudioSource = &RecognitionAudio_Uri{x}
		return true, err
	default:
		return false, nil
	}
}

func _RecognitionAudio_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RecognitionAudio)
	// audio_source
	switch x := m.AudioSource.(type) {
	case *RecognitionAudio_Content:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Content)))
		n += len(x.Content)
	case *RecognitionAudio_Uri:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Uri)))
		n += len(x.Uri)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The only message returned to the client by the `Recognize` method. It
// contains the result as zero or more sequential `SpeechRecognitionResult`
// messages.
type RecognizeResponse struct {
	// Output only. Sequential list of transcription results corresponding to
	// sequential portions of audio.
	Results              []*SpeechRecognitionResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RecognizeResponse) Reset()         { *m = RecognizeResponse{} }
func (m *RecognizeResponse) String() string { return proto.CompactTextString(m) }
func (*RecognizeResponse) ProtoMessage()    {}
func (*RecognizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{7}
}
func (m *RecognizeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecognizeResponse.Unmarshal(m, b)
}
func (m *RecognizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecognizeResponse.Marshal(b, m, deterministic)
}
func (dst *RecognizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecognizeResponse.Merge(dst, src)
}
func (m *RecognizeResponse) XXX_Size() int {
	return xxx_messageInfo_RecognizeResponse.Size(m)
}
func (m *RecognizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecognizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecognizeResponse proto.InternalMessageInfo

func (m *RecognizeResponse) GetResults() []*SpeechRecognitionResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// The only message returned to the client by the `LongRunningRecognize` method.
// It contains the result as zero or more sequential `SpeechRecognitionResult`
// messages. It is included in the `result.response` field of the `Operation`
// returned by the `GetOperation` call of the `sogou.speech.longrunning.Operations`
// service.
type LongRunningRecognizeResponse struct {
	Results              []*SpeechRecognitionResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LongRunningRecognizeResponse) Reset()         { *m = LongRunningRecognizeResponse{} }
func (m *LongRunningRecognizeResponse) String() string { return proto.CompactTextString(m) }
func (*LongRunningRecognizeResponse) ProtoMessage()    {}
func (*LongRunningRecognizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{8}
}
func (m *LongRunningRecognizeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LongRunningRecognizeResponse.Unmarshal(m, b)
}
func (m *LongRunningRecognizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LongRunningRecognizeResponse.Marshal(b, m, deterministic)
}
func (dst *LongRunningRecognizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LongRunningRecognizeResponse.Merge(dst, src)
}
func (m *LongRunningRecognizeResponse) XXX_Size() int {
	return xxx_messageInfo_LongRunningRecognizeResponse.Size(m)
}
func (m *LongRunningRecognizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LongRunningRecognizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LongRunningRecognizeResponse proto.InternalMessageInfo

func (m *LongRunningRecognizeResponse) GetResults() []*SpeechRecognitionResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// Describes the progress of a long-running `LongRunningRecognize` call. It is
// included in the `metadata` field of the `Operation` returned by the
// `GetOperation` call of the `sogou.speech.longrunning.Operations` service.
type LongRunningRecognizeMetadata struct {
	// Approximate percentage of audio processed thus far. Guaranteed to be 100
	// when the audio is fully processed and the results are available.
	ProgressPercent int32 `protobuf:"varint,1,opt,name=progress_percent,json=progressPercent,proto3" json:"progress_percent,omitempty"`
	// Time when the request was received.
	StartTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Time of the most recent processing update.
	LastUpdateTime       *timestamp.Timestamp `protobuf:"bytes,3,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *LongRunningRecognizeMetadata) Reset()         { *m = LongRunningRecognizeMetadata{} }
func (m *LongRunningRecognizeMetadata) String() string { return proto.CompactTextString(m) }
func (*LongRunningRecognizeMetadata) ProtoMessage()    {}
func (*LongRunningRecognizeMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{9}
}
func (m *LongRunningRecognizeMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LongRunningRecognizeMetadata.Unmarshal(m, b)
}
func (m *LongRunningRecognizeMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LongRunningRecognizeMetadata.Marshal(b, m, deterministic)
}
func (dst *LongRunningRecognizeMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LongRunningRecognizeMetadata.Merge(dst, src)
}
func (m *LongRunningRecognizeMetadata) XXX_Size() int {
	return xxx_messageInfo_LongRunningRecognizeMetadata.Size(m)
}
func (m *LongRunningRecognizeMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_LongRunningRecognizeMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_LongRunningRecognizeMetadata proto.InternalMessageInfo

func (m *LongRunningRecognizeMetadata) GetProgressPercent() int32 {
	if m != nil {
		return m.ProgressPercent
	}
	return 0
}

func (m *LongRunningRecognizeMetadata) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *LongRunningRecognizeMetadata) GetLastUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastUpdateTime
	}
	return nil
}

// `StreamingRecognizeResponse` is the only message returned to the client by
// `StreamingRecognize`. A series of zero or more `StreamingRecognizeResponse`
// messages are streamed back to the client. If there is no recognizable
// audio, and `single_utterance` is set to false, then no messages are streamed
// back to the client.
// In each response, only one of these fields will be set:
//   `error`,
//   `speech_event_type`, or
//   one or more (repeated) `results`.
type StreamingRecognizeResponse struct {
	// *Output-only* If set, returns a [google.rpc.Status] message that
	// specifies the error for the operation.
	Error *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// *Output-only* This repeated list contains zero or more results that
	// correspond to consecutive portions of the audio currently being processed.
	// It contains zero or more `is_final=false` results followed by zero or one
	// `is_final=true` result (the newly settled portion).
	Results []*StreamingRecognitionResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	// *Output-only* Indicates the type of speech event.
	SpeechEventType      StreamingRecognizeResponse_SpeechEventType `protobuf:"varint,4,opt,name=speech_event_type,json=speechEventType,proto3,enum=sogou.speech.asr.v1.StreamingRecognizeResponse_SpeechEventType" json:"speech_event_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *StreamingRecognizeResponse) Reset()         { *m = StreamingRecognizeResponse{} }
func (m *StreamingRecognizeResponse) String() string { return proto.CompactTextString(m) }
func (*StreamingRecognizeResponse) ProtoMessage()    {}
func (*StreamingRecognizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{10}
}
func (m *StreamingRecognizeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingRecognizeResponse.Unmarshal(m, b)
}
func (m *StreamingRecognizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingRecognizeResponse.Marshal(b, m, deterministic)
}
func (dst *StreamingRecognizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingRecognizeResponse.Merge(dst, src)
}
func (m *StreamingRecognizeResponse) XXX_Size() int {
	return xxx_messageInfo_StreamingRecognizeResponse.Size(m)
}
func (m *StreamingRecognizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingRecognizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingRecognizeResponse proto.InternalMessageInfo

func (m *StreamingRecognizeResponse) GetError() *status.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *StreamingRecognizeResponse) GetResults() []*StreamingRecognitionResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *StreamingRecognizeResponse) GetSpeechEventType() StreamingRecognizeResponse_SpeechEventType {
	if m != nil {
		return m.SpeechEventType
	}
	return StreamingRecognizeResponse_SPEECH_EVENT_UNSPECIFIED
}

// A streaming speech recognition result corresponding to a portion of the audio
// that is currently being processed.
type StreamingRecognitionResult struct {
	// *Output-only* May contain one or more recognition hypotheses (up to the
	// maximum specified in `max_alternatives`).
	Alternatives []*SpeechRecognitionAlternative `protobuf:"bytes,1,rep,name=alternatives,proto3" json:"alternatives,omitempty"`
	// *Output-only* If `false`, this `StreamingRecognitionResult` represents an
	// interim result that may change. If `true`, this is the final time the
	// speech service will return this particular `StreamingRecognitionResult`,
	// the recognizer will not return any further hypotheses for this portion of
	// the transcript and corresponding audio.
	IsFinal bool `protobuf:"varint,2,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
	// *Output-only* An estimate of the likelihood that the recognizer will not
	// change its guess about this interim result. Values range from 0.0
	// (completely unstable) to 1.0 (completely stable).
	// This field is only provided for interim results (`is_final=false`).
	// The default of 0.0 is a sentinel value indicating `stability` was not set.
	Stability float32 `protobuf:"fixed32,3,opt,name=stability,proto3" json:"stability,omitempty"`
	// *Output-only* Other informations related to this recongition result
	Extra                map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StreamingRecognitionResult) Reset()         { *m = StreamingRecognitionResult{} }
func (m *StreamingRecognitionResult) String() string { return proto.CompactTextString(m) }
func (*StreamingRecognitionResult) ProtoMessage()    {}
func (*StreamingRecognitionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{11}
}
func (m *StreamingRecognitionResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingRecognitionResult.Unmarshal(m, b)
}
func (m *StreamingRecognitionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingRecognitionResult.Marshal(b, m, deterministic)
}
func (dst *StreamingRecognitionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingRecognitionResult.Merge(dst, src)
}
func (m *StreamingRecognitionResult) XXX_Size() int {
	return xxx_messageInfo_StreamingRecognitionResult.Size(m)
}
func (m *StreamingRecognitionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingRecognitionResult.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingRecognitionResult proto.InternalMessageInfo

func (m *StreamingRecognitionResult) GetAlternatives() []*SpeechRecognitionAlternative {
	if m != nil {
		return m.Alternatives
	}
	return nil
}

func (m *StreamingRecognitionResult) GetIsFinal() bool {
	if m != nil {
		return m.IsFinal
	}
	return false
}

func (m *StreamingRecognitionResult) GetStability() float32 {
	if m != nil {
		return m.Stability
	}
	return 0
}

func (m *StreamingRecognitionResult) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

// A speech recognition result corresponding to a portion of the audio.
type SpeechRecognitionResult struct {
	// Output only. May contain one or more recognition hypotheses (up to the
	// maximum specified in `max_alternatives`).
	// These alternatives are ordered in terms of accuracy, with the top (first)
	// alternative being the most probable, as ranked by the recognizer.
	Alternatives []*SpeechRecognitionAlternative `protobuf:"bytes,1,rep,name=alternatives,proto3" json:"alternatives,omitempty"`
	// *Output-only* Other informations related to this recongition result
	Extra                map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SpeechRecognitionResult) Reset()         { *m = SpeechRecognitionResult{} }
func (m *SpeechRecognitionResult) String() string { return proto.CompactTextString(m) }
func (*SpeechRecognitionResult) ProtoMessage()    {}
func (*SpeechRecognitionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{12}
}
func (m *SpeechRecognitionResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpeechRecognitionResult.Unmarshal(m, b)
}
func (m *SpeechRecognitionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpeechRecognitionResult.Marshal(b, m, deterministic)
}
func (dst *SpeechRecognitionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpeechRecognitionResult.Merge(dst, src)
}
func (m *SpeechRecognitionResult) XXX_Size() int {
	return xxx_messageInfo_SpeechRecognitionResult.Size(m)
}
func (m *SpeechRecognitionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SpeechRecognitionResult.DiscardUnknown(m)
}

var xxx_messageInfo_SpeechRecognitionResult proto.InternalMessageInfo

func (m *SpeechRecognitionResult) GetAlternatives() []*SpeechRecognitionAlternative {
	if m != nil {
		return m.Alternatives
	}
	return nil
}

func (m *SpeechRecognitionResult) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

// Alternative hypotheses (a.k.a. n-best list).
type SpeechRecognitionAlternative struct {
	// *Output-only* Transcript text representing the words that the user spoke.
	Transcript string `protobuf:"bytes,1,opt,name=transcript,proto3" json:"transcript,omitempty"`
	// *Output-only* The confidence estimate between 0.0 and 1.0. A higher number
	// indicates an estimated greater likelihood that the recognized words are
	// correct. This field is typically provided only for the top hypothesis, and
	// only for `is_final=true` results. Clients should not rely on the
	// `confidence` field as it is not guaranteed to be accurate or consistent.
	// The default of 0.0 is a sentinel value indicating `confidence` was not set.
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// *Output-only* A list of word-specific information for each recognized word.
	Words []*WordInfo `protobuf:"bytes,3,rep,name=words,proto3" json:"words,omitempty"`
	// *Output-only* Other informations related to this transcript text
	Extra                map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SpeechRecognitionAlternative) Reset()         { *m = SpeechRecognitionAlternative{} }
func (m *SpeechRecognitionAlternative) String() string { return proto.CompactTextString(m) }
func (*SpeechRecognitionAlternative) ProtoMessage()    {}
func (*SpeechRecognitionAlternative) Descriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{13}
}
func (m *SpeechRecognitionAlternative) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpeechRecognitionAlternative.Unmarshal(m, b)
}
func (m *SpeechRecognitionAlternative) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpeechRecognitionAlternative.Marshal(b, m, deterministic)
}
func (dst *SpeechRecognitionAlternative) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpeechRecognitionAlternative.Merge(dst, src)
}
func (m *SpeechRecognitionAlternative) XXX_Size() int {
	return xxx_messageInfo_SpeechRecognitionAlternative.Size(m)
}
func (m *SpeechRecognitionAlternative) XXX_DiscardUnknown() {
	xxx_messageInfo_SpeechRecognitionAlternative.DiscardUnknown(m)
}

var xxx_messageInfo_SpeechRecognitionAlternative proto.InternalMessageInfo

func (m *SpeechRecognitionAlternative) GetTranscript() string {
	if m != nil {
		return m.Transcript
	}
	return ""
}

func (m *SpeechRecognitionAlternative) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *SpeechRecognitionAlternative) GetWords() []*WordInfo {
	if m != nil {
		return m.Words
	}
	return nil
}

func (m *SpeechRecognitionAlternative) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

// Word-specific information for recognized words. Word information is only
// included in the response when certain request parameters are set, such
// as `enable_word_time_offsets`.
type WordInfo struct {
	// *Output-only* Time offset relative to the beginning of the audio,
	// and corresponding to the start of the spoken word.
	// This field is only set if `enable_word_time_offsets=true` and only
	// in the top hypothesis.
	// This is an experimental feature and the accuracy of the time offset can
	// vary.
	StartTime *duration.Duration `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// *Output-only* Time offset relative to the beginning of the audio,
	// and corresponding to the end of the spoken word.
	// This field is only set if `enable_word_time_offsets=true` and only
	// in the top hypothesis.
	// This is an experimental feature and the accuracy of the time offset can
	// vary.
	EndTime *duration.Duration `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// *Output-only* The word corresponding to this set of information.
	Word                 string   `protobuf:"bytes,3,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WordInfo) Reset()         { *m = WordInfo{} }
func (m *WordInfo) String() string { return proto.CompactTextString(m) }
func (*WordInfo) ProtoMessage()    {}
func (*WordInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_asr_3b732997e1a435ba, []int{14}
}
func (m *WordInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WordInfo.Unmarshal(m, b)
}
func (m *WordInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WordInfo.Marshal(b, m, deterministic)
}
func (dst *WordInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WordInfo.Merge(dst, src)
}
func (m *WordInfo) XXX_Size() int {
	return xxx_messageInfo_WordInfo.Size(m)
}
func (m *WordInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WordInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WordInfo proto.InternalMessageInfo

func (m *WordInfo) GetStartTime() *duration.Duration {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *WordInfo) GetEndTime() *duration.Duration {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *WordInfo) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

func init() {
	proto.RegisterType((*RecognizeRequest)(nil), "sogou.speech.asr.v1.RecognizeRequest")
	proto.RegisterType((*LongRunningRecognizeRequest)(nil), "sogou.speech.asr.v1.LongRunningRecognizeRequest")
	proto.RegisterType((*StreamingRecognizeRequest)(nil), "sogou.speech.asr.v1.StreamingRecognizeRequest")
	proto.RegisterType((*StreamingRecognitionConfig)(nil), "sogou.speech.asr.v1.StreamingRecognitionConfig")
	proto.RegisterType((*RecognitionConfig)(nil), "sogou.speech.asr.v1.RecognitionConfig")
	proto.RegisterType((*SpeechContext)(nil), "sogou.speech.asr.v1.SpeechContext")
	proto.RegisterType((*RecognitionAudio)(nil), "sogou.speech.asr.v1.RecognitionAudio")
	proto.RegisterType((*RecognizeResponse)(nil), "sogou.speech.asr.v1.RecognizeResponse")
	proto.RegisterType((*LongRunningRecognizeResponse)(nil), "sogou.speech.asr.v1.LongRunningRecognizeResponse")
	proto.RegisterType((*LongRunningRecognizeMetadata)(nil), "sogou.speech.asr.v1.LongRunningRecognizeMetadata")
	proto.RegisterType((*StreamingRecognizeResponse)(nil), "sogou.speech.asr.v1.StreamingRecognizeResponse")
	proto.RegisterType((*StreamingRecognitionResult)(nil), "sogou.speech.asr.v1.StreamingRecognitionResult")
	proto.RegisterMapType((map[string]string)(nil), "sogou.speech.asr.v1.StreamingRecognitionResult.ExtraEntry")
	proto.RegisterType((*SpeechRecognitionResult)(nil), "sogou.speech.asr.v1.SpeechRecognitionResult")
	proto.RegisterMapType((map[string]string)(nil), "sogou.speech.asr.v1.SpeechRecognitionResult.ExtraEntry")
	proto.RegisterType((*SpeechRecognitionAlternative)(nil), "sogou.speech.asr.v1.SpeechRecognitionAlternative")
	proto.RegisterMapType((map[string]string)(nil), "sogou.speech.asr.v1.SpeechRecognitionAlternative.ExtraEntry")
	proto.RegisterType((*WordInfo)(nil), "sogou.speech.asr.v1.WordInfo")
	proto.RegisterEnum("sogou.speech.asr.v1.RecognitionConfig_AudioEncoding", RecognitionConfig_AudioEncoding_name, RecognitionConfig_AudioEncoding_value)
	proto.RegisterEnum("sogou.speech.asr.v1.StreamingRecognizeResponse_SpeechEventType", StreamingRecognizeResponse_SpeechEventType_name, StreamingRecognizeResponse_SpeechEventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AsrClient is the client API for Asr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AsrClient interface {
	// Performs synchronous speech recognition: receive results after all audio
	// has been sent and processed.
	Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognizeResponse, error)
	// Performs asynchronous speech recognition: receive results via sogou.speech.longrunning.GetOperation interface
	LongRunningRecognize(ctx context.Context, in *LongRunningRecognizeRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Performs bidirectional streaming speech recognition: receive results while
	// sending audio. This method is only available via the gRPC API (not REST).
	StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (Asr_StreamingRecognizeClient, error)
}

type asrClient struct {
	cc *grpc.ClientConn
}

func NewAsrClient(cc *grpc.ClientConn) AsrClient {
	return &asrClient{cc}
}

func (c *asrClient) Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognizeResponse, error) {
	out := new(RecognizeResponse)
	err := c.cc.Invoke(ctx, "/sogou.speech.asr.v1.asr/Recognize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrClient) LongRunningRecognize(ctx context.Context, in *LongRunningRecognizeRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/sogou.speech.asr.v1.asr/LongRunningRecognize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asrClient) StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (Asr_StreamingRecognizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Asr_serviceDesc.Streams[0], "/sogou.speech.asr.v1.asr/StreamingRecognize", opts...)
	if err != nil {
		return nil, err
	}
	x := &asrStreamingRecognizeClient{stream}
	return x, nil
}

type Asr_StreamingRecognizeClient interface {
	Send(*StreamingRecognizeRequest) error
	Recv() (*StreamingRecognizeResponse, error)
	grpc.ClientStream
}

type asrStreamingRecognizeClient struct {
	grpc.ClientStream
}

func (x *asrStreamingRecognizeClient) Send(m *StreamingRecognizeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *asrStreamingRecognizeClient) Recv() (*StreamingRecognizeResponse, error) {
	m := new(StreamingRecognizeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AsrServer is the server API for Asr service.
type AsrServer interface {
	// Performs synchronous speech recognition: receive results after all audio
	// has been sent and processed.
	Recognize(context.Context, *RecognizeRequest) (*RecognizeResponse, error)
	// Performs asynchronous speech recognition: receive results via sogou.speech.longrunning.GetOperation interface
	LongRunningRecognize(context.Context, *LongRunningRecognizeRequest) (*longrunning.Operation, error)
	// Performs bidirectional streaming speech recognition: receive results while
	// sending audio. This method is only available via the gRPC API (not REST).
	StreamingRecognize(Asr_StreamingRecognizeServer) error
}

func RegisterAsrServer(s *grpc.Server, srv AsrServer) {
	s.RegisterService(&_Asr_serviceDesc, srv)
}

func _Asr_Recognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrServer).Recognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sogou.speech.asr.v1.asr/Recognize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrServer).Recognize(ctx, req.(*RecognizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asr_LongRunningRecognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LongRunningRecognizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsrServer).LongRunningRecognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sogou.speech.asr.v1.asr/LongRunningRecognize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsrServer).LongRunningRecognize(ctx, req.(*LongRunningRecognizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asr_StreamingRecognize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AsrServer).StreamingRecognize(&asrStreamingRecognizeServer{stream})
}

type Asr_StreamingRecognizeServer interface {
	Send(*StreamingRecognizeResponse) error
	Recv() (*StreamingRecognizeRequest, error)
	grpc.ServerStream
}

type asrStreamingRecognizeServer struct {
	grpc.ServerStream
}

func (x *asrStreamingRecognizeServer) Send(m *StreamingRecognizeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *asrStreamingRecognizeServer) Recv() (*StreamingRecognizeRequest, error) {
	m := new(StreamingRecognizeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Asr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sogou.speech.asr.v1.asr",
	HandlerType: (*AsrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recognize",
			Handler:    _Asr_Recognize_Handler,
		},
		{
			MethodName: "LongRunningRecognize",
			Handler:    _Asr_LongRunningRecognize_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingRecognize",
			Handler:       _Asr_StreamingRecognize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sogou/speech/asr/v1/asr.proto",
}

func init() { proto.RegisterFile("sogou/speech/asr/v1/asr.proto", fileDescriptor_asr_3b732997e1a435ba) }

var fileDescriptor_asr_3b732997e1a435ba = []byte{
	// 1438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0xda, 0x71, 0xe3, 0x9c, 0xfc, 0xd8, 0x99, 0x06, 0xc5, 0x71, 0xd3, 0x1f, 0x6d, 0xd5,
	0x36, 0x45, 0x68, 0xdd, 0xa4, 0x15, 0xfd, 0x43, 0x20, 0xc7, 0xd9, 0x34, 0x56, 0x53, 0xc7, 0x1a,
	0x27, 0x05, 0x95, 0x48, 0xab, 0xc9, 0x7a, 0xec, 0xae, 0x6a, 0xef, 0x2e, 0x33, 0xb3, 0x21, 0xee,
	0x1b, 0x70, 0x03, 0xf7, 0xdc, 0xc1, 0x05, 0x17, 0xdc, 0x23, 0x21, 0x1e, 0xa1, 0xf0, 0x40, 0x20,
	0x6e, 0xd0, 0xcc, 0xec, 0x3a, 0x76, 0xe2, 0xa6, 0x89, 0x28, 0x12, 0x57, 0xf6, 0x7c, 0xe7, 0x3b,
	0x67, 0xce, 0x9c, 0x39, 0xf3, 0xcd, 0x2c, 0x5c, 0xe6, 0x41, 0x3b, 0x88, 0x4a, 0x3c, 0xa4, 0xd4,
	0x7d, 0x59, 0x22, 0x9c, 0x95, 0x0e, 0x56, 0xe4, 0x8f, 0x15, 0xb2, 0x40, 0x04, 0xe8, 0xa2, 0x32,
	0x5b, 0xda, 0x6c, 0x49, 0xfc, 0x60, 0xa5, 0xb8, 0xd8, 0x0e, 0x82, 0x76, 0x87, 0x96, 0x14, 0x65,
	0x3f, 0x6a, 0x95, 0x88, 0xdf, 0xd3, 0xfc, 0xe2, 0x95, 0xe3, 0xa6, 0x66, 0xc4, 0x88, 0xf0, 0x02,
	0x3f, 0xb6, 0x5f, 0x3d, 0x6e, 0x17, 0x5e, 0x97, 0x72, 0x41, 0xba, 0x61, 0x4c, 0x58, 0x88, 0x09,
	0x2c, 0x74, 0x4b, 0x5c, 0x10, 0x11, 0xf1, 0xd8, 0x70, 0x7b, 0x28, 0xd1, 0x4e, 0xe0, 0xb7, 0x59,
	0xe4, 0xfb, 0x9e, 0xdf, 0x2e, 0x05, 0x21, 0xd5, 0x73, 0xc4, 0x54, 0xf3, 0x3b, 0x03, 0xf2, 0x98,
	0xba, 0x41, 0xdb, 0xf7, 0x5e, 0x53, 0x4c, 0xbf, 0x8a, 0x28, 0x17, 0xe8, 0x53, 0xb8, 0xe0, 0x06,
	0x7e, 0xcb, 0x6b, 0x17, 0x8c, 0x6b, 0xc6, 0xf2, 0xd4, 0xea, 0x4d, 0x6b, 0xc4, 0xd2, 0xac, 0xd8,
	0x4d, 0x46, 0xab, 0x28, 0x36, 0x8e, 0xbd, 0xd0, 0x63, 0xc8, 0x90, 0xa8, 0xe9, 0x05, 0x85, 0x94,
	0x72, 0xbf, 0xf1, 0x2e, 0xf7, 0xb2, 0x24, 0x63, 0xed, 0x63, 0x7e, 0x6f, 0xc0, 0xa5, 0xad, 0xc0,
	0x6f, 0x63, 0x9d, 0xf2, 0xff, 0x2b, 0xb9, 0x5f, 0x0c, 0x58, 0x6c, 0x08, 0x46, 0x49, 0x77, 0x54,
	0x6a, 0x7b, 0x90, 0xe7, 0x89, 0xd1, 0x19, 0x4a, 0xb2, 0x34, 0x72, 0x96, 0xe3, 0x91, 0x8e, 0xb2,
	0xdd, 0x1c, 0xc3, 0xb9, 0x7e, 0x28, 0x0d, 0xa1, 0x1b, 0x30, 0xa3, 0x92, 0x90, 0x91, 0x05, 0xf5,
	0x85, 0x5a, 0xc0, 0xf4, 0xe6, 0x18, 0x9e, 0x56, 0x70, 0x45, 0xa3, 0x6b, 0x17, 0x61, 0xee, 0x28,
	0x09, 0xa6, 0x33, 0x33, 0x7f, 0x4a, 0x41, 0xf1, 0xed, 0xb3, 0xfd, 0xeb, 0x9a, 0xde, 0x86, 0x3c,
	0xf7, 0xfc, 0x76, 0x87, 0x3a, 0x91, 0x10, 0x94, 0x11, 0xdf, 0xa5, 0x2a, 0xbb, 0x2c, 0xce, 0x69,
	0x7c, 0x37, 0x81, 0xd1, 0x2d, 0xc8, 0x79, 0xbe, 0xa0, 0xcc, 0xeb, 0x3a, 0x8c, 0xf2, 0xa8, 0x23,
	0x78, 0x21, 0xad, 0x98, 0xb3, 0x31, 0x8c, 0x35, 0x8a, 0x9e, 0x82, 0x49, 0x7d, 0xb2, 0xdf, 0xa1,
	0xce, 0x31, 0xbe, 0x13, 0x46, 0xbe, 0x2b, 0x22, 0xd5, 0xc6, 0x85, 0x71, 0xe5, 0x7b, 0x55, 0x33,
	0xab, 0x43, 0x11, 0xea, 0x47, 0x34, 0x39, 0x6b, 0x97, 0xb2, 0xf6, 0x60, 0x7e, 0x19, 0x3d, 0xab,
	0x82, 0xfb, 0xe9, 0x99, 0x7f, 0x8f, 0xc3, 0xdc, 0xc9, 0xfa, 0xd4, 0x21, 0x4b, 0x7d, 0x37, 0x68,
	0x7a, 0xbe, 0xae, 0xd0, 0xec, 0xea, 0xbd, 0xb3, 0x55, 0xc8, 0x52, 0xdd, 0x63, 0xc7, 0xbe, 0xb8,
	0x1f, 0x05, 0x7d, 0x08, 0x73, 0x9c, 0x74, 0xc3, 0x0e, 0x75, 0x18, 0x11, 0xd4, 0x79, 0x49, 0x99,
	0x78, 0xad, 0x4a, 0x96, 0xc1, 0x39, 0x6d, 0xc0, 0x44, 0xd0, 0x4d, 0x09, 0xa3, 0xeb, 0x30, 0xd3,
	0x21, 0x7e, 0x3b, 0x22, 0x6d, 0xea, 0xb8, 0x41, 0x93, 0xaa, 0x82, 0x4d, 0xe2, 0xe9, 0x04, 0xac,
	0x04, 0x4d, 0x2a, 0xb7, 0xa0, 0x4b, 0x0e, 0x1d, 0xd2, 0x11, 0x94, 0xf9, 0x44, 0x78, 0x07, 0x94,
	0xab, 0xe2, 0x64, 0x70, 0xae, 0x4b, 0x0e, 0xcb, 0x03, 0xb0, 0xa4, 0x86, 0x2c, 0x68, 0x11, 0xdf,
	0x13, 0x3d, 0xa7, 0xe5, 0x49, 0x53, 0x5c, 0x8d, 0x5c, 0x1f, 0xdf, 0x50, 0x30, 0x7a, 0x0a, 0x39,
	0xbd, 0x42, 0xdd, 0x74, 0x87, 0x82, 0x17, 0x2e, 0x5c, 0x4b, 0x2f, 0x4f, 0xad, 0x9a, 0xa3, 0x1b,
	0x5a, 0x8d, 0x2a, 0x9a, 0x8a, 0x67, 0xf9, 0xe0, 0x90, 0xa3, 0xfb, 0x50, 0x88, 0x77, 0xf4, 0xeb,
	0x80, 0x35, 0x1d, 0x29, 0x67, 0x4e, 0xd0, 0x6a, 0x71, 0x2a, 0x78, 0x21, 0xab, 0xe6, 0xff, 0x40,
	0xdb, 0x3f, 0x0f, 0x58, 0x73, 0xc7, 0xeb, 0xd2, 0x6d, 0x6d, 0x44, 0x6b, 0x70, 0xb9, 0xe9, 0x71,
	0xe5, 0x49, 0x22, 0x11, 0x74, 0x89, 0xf0, 0xdc, 0xa1, 0x2e, 0x98, 0x52, 0xde, 0x97, 0x62, 0x52,
	0x39, 0xe1, 0x0c, 0x76, 0xc0, 0x3c, 0x64, 0xba, 0x41, 0x93, 0x76, 0x0a, 0x33, 0xaa, 0x78, 0x7a,
	0x80, 0x1e, 0xc2, 0x0c, 0x3d, 0x14, 0x8c, 0xc4, 0xa7, 0x95, 0x17, 0xe6, 0xd5, 0xea, 0xe6, 0x2d,
	0x2d, 0xad, 0x56, 0xa2, 0xbd, 0x56, 0xd9, 0xef, 0xe1, 0x69, 0x45, 0xd5, 0x1b, 0xcb, 0x4d, 0x0c,
	0x33, 0x43, 0x9b, 0x8b, 0x0a, 0x30, 0x6f, 0xd7, 0x2a, 0xdb, 0xeb, 0xd5, 0xda, 0x13, 0x67, 0xb7,
	0xd6, 0xa8, 0xdb, 0x95, 0xea, 0x46, 0xd5, 0x5e, 0xcf, 0x8f, 0xa1, 0x69, 0xc8, 0x6e, 0x55, 0x6b,
	0x76, 0x19, 0xaf, 0x7c, 0x9c, 0x37, 0x50, 0x16, 0xc6, 0x37, 0xb6, 0xca, 0x95, 0x7c, 0x0a, 0xe5,
	0x60, 0xaa, 0xb1, 0xfd, 0x64, 0x7b, 0xd7, 0x69, 0xd4, 0x6d, 0xfb, 0x8b, 0x7c, 0xd3, 0xbc, 0x0d,
	0x33, 0x43, 0x25, 0x44, 0x05, 0x98, 0x08, 0x5f, 0x32, 0xc2, 0x29, 0x2f, 0x18, 0xd7, 0xd2, 0xcb,
	0x93, 0x38, 0x19, 0x9a, 0xb8, 0xaf, 0xdb, 0x7d, 0x91, 0x42, 0x45, 0x98, 0x48, 0xb4, 0xc1, 0x88,
	0xb5, 0x21, 0x01, 0x10, 0x82, 0x74, 0xc4, 0x3c, 0xd5, 0x62, 0x93, 0x9b, 0x63, 0x58, 0x0e, 0xd6,
	0x66, 0x41, 0x4b, 0x87, 0xc3, 0x83, 0x88, 0xb9, 0xd4, 0xfc, 0xb2, 0xdf, 0xfb, 0x52, 0xd3, 0x78,
	0x18, 0xf8, 0x9c, 0xa2, 0x0d, 0x98, 0x48, 0x0e, 0xaa, 0xa1, 0x8a, 0xf3, 0xd1, 0x29, 0x5b, 0x3f,
	0x90, 0x92, 0x3e, 0x85, 0x38, 0x71, 0x36, 0x5b, 0xb0, 0x34, 0x5a, 0xd6, 0xdf, 0xf3, 0x3c, 0x6f,
	0x8c, 0xd1, 0x13, 0x3d, 0xa3, 0x82, 0x34, 0x89, 0x20, 0x71, 0xfb, 0xb7, 0x19, 0xe5, 0xdc, 0x09,
	0x29, 0x73, 0x93, 0x72, 0x65, 0x54, 0xfb, 0x2b, 0xbc, 0xae, 0x61, 0xf4, 0x10, 0x80, 0x0b, 0xc2,
	0x84, 0xea, 0xd5, 0xf8, 0xc2, 0x28, 0x9e, 0xe8, 0x8d, 0x9d, 0xe4, 0x5e, 0xc6, 0x93, 0x8a, 0x2d,
	0xc7, 0x68, 0x1d, 0xf2, 0x1d, 0xc2, 0x85, 0x13, 0x85, 0x4d, 0x79, 0xc0, 0x55, 0x80, 0xf4, 0x3b,
	0x03, 0xcc, 0x4a, 0x9f, 0x5d, 0xe5, 0x22, 0x41, 0xf3, 0x8f, 0x11, 0xba, 0x3d, 0x50, 0xb3, 0x65,
	0xc8, 0x50, 0xc6, 0x02, 0x16, 0xcb, 0x36, 0x4a, 0x22, 0xb3, 0xd0, 0xb5, 0x1a, 0xea, 0x45, 0x80,
	0x35, 0x01, 0x55, 0x8f, 0xaa, 0x9b, 0x52, 0xd5, 0x3d, 0xfb, 0x8d, 0x74, 0xac, 0xc0, 0xe8, 0x15,
	0xcc, 0xc5, 0x9a, 0x40, 0x0f, 0xa8, 0x2f, 0x1c, 0xd1, 0x0b, 0xa9, 0x92, 0x9a, 0xd9, 0xd5, 0xcf,
	0xce, 0x14, 0xf4, 0x68, 0x01, 0xf1, 0x6e, 0xda, 0x32, 0xce, 0x4e, 0x2f, 0xa4, 0x38, 0x56, 0x9b,
	0x3e, 0x60, 0x6e, 0x41, 0xee, 0x18, 0x07, 0x2d, 0x41, 0x41, 0x9e, 0x97, 0xca, 0xa6, 0x63, 0x3f,
	0xb7, 0x6b, 0x3b, 0xc7, 0xce, 0xda, 0x25, 0x58, 0xb0, 0x6b, 0xeb, 0xce, 0xf6, 0x86, 0xd3, 0xa8,
	0xd6, 0x9e, 0x6c, 0xd9, 0xce, 0xee, 0xce, 0x8e, 0x8d, 0xcb, 0xb5, 0x8a, 0x9d, 0x37, 0xcc, 0x5f,
	0xdf, 0x72, 0x0d, 0xea, 0x25, 0xa2, 0x5d, 0x98, 0x1e, 0xd2, 0x4f, 0xdd, 0x87, 0x2b, 0x67, 0xeb,
	0xc3, 0x01, 0x89, 0xc5, 0x43, 0x61, 0xd0, 0x22, 0x64, 0x3d, 0xee, 0xb4, 0x3c, 0x9f, 0x74, 0xe2,
	0x5b, 0x71, 0xc2, 0xe3, 0x1b, 0x72, 0x88, 0x96, 0x40, 0xb6, 0xcc, 0xbe, 0xd7, 0xf1, 0x44, 0x4f,
	0xb5, 0x47, 0x0a, 0x1f, 0x01, 0xa8, 0x0e, 0x19, 0x25, 0x39, 0x85, 0x71, 0x95, 0xc8, 0xa3, 0x73,
	0x6e, 0x99, 0x65, 0x4b, 0x67, 0xdb, 0x17, 0xac, 0x87, 0x75, 0xa0, 0xe2, 0x03, 0x80, 0x23, 0x10,
	0xe5, 0x21, 0xfd, 0x8a, 0xf6, 0x54, 0xf3, 0x4c, 0x62, 0xf9, 0x57, 0xaa, 0xe4, 0x01, 0xe9, 0x44,
	0xba, 0xd7, 0x27, 0xb1, 0x1e, 0x3c, 0x4a, 0x3d, 0x30, 0xcc, 0xbf, 0x0c, 0x58, 0x78, 0xcb, 0xd9,
	0xfb, 0xaf, 0xea, 0xf6, 0x2c, 0x59, 0xbe, 0xee, 0xd8, 0xfb, 0xe7, 0xd1, 0x83, 0xf7, 0xba, 0xf6,
	0x1f, 0x52, 0xb0, 0x74, 0x5a, 0xde, 0xe8, 0x0a, 0x80, 0x60, 0xc4, 0xe7, 0x2e, 0xf3, 0x42, 0x11,
	0xc7, 0x1c, 0x40, 0xa4, 0x5d, 0x5d, 0x30, 0x4d, 0x9a, 0xbc, 0x8c, 0x52, 0x78, 0x00, 0x41, 0x77,
	0x21, 0x23, 0xaf, 0x44, 0xf9, 0x14, 0x92, 0x2b, 0xbd, 0x3c, 0x72, 0xa5, 0xf2, 0x56, 0xac, 0xfa,
	0xad, 0x00, 0x6b, 0x2e, 0xc2, 0xc3, 0xdd, 0xf1, 0xc9, 0xb9, 0xcb, 0xfd, 0x5e, 0x6b, 0xf4, 0xad,
	0x01, 0xd9, 0x24, 0x43, 0xf4, 0x60, 0x48, 0x37, 0xb5, 0x38, 0x2d, 0x9e, 0x90, 0xbd, 0xf5, 0xf8,
	0x7b, 0x67, 0x50, 0x36, 0xef, 0xc9, 0x97, 0x56, 0x73, 0x50, 0x6f, 0x4f, 0xf1, 0x9b, 0xa0, 0xbe,
	0x7a, 0x27, 0x20, 0x04, 0xe3, 0xb2, 0x26, 0xf1, 0xc3, 0x48, 0xfd, 0x5f, 0xfd, 0x3d, 0x05, 0x69,
	0xc2, 0x19, 0x7a, 0x01, 0x93, 0x7d, 0xdd, 0x41, 0xa7, 0xbe, 0xf6, 0xfb, 0x0f, 0xf9, 0xe2, 0xcd,
	0x77, 0xd1, 0x62, 0xfd, 0xed, 0xc2, 0xfc, 0xa8, 0xab, 0x06, 0xdd, 0x19, 0xe9, 0x7f, 0xca, 0x57,
	0x4d, 0xf1, 0xfa, 0xb0, 0xc7, 0xc0, 0x37, 0x9b, 0xb5, 0x9d, 0x7c, 0xb3, 0xa1, 0x1e, 0xa0, 0x93,
	0x5a, 0x8a, 0xac, 0x33, 0x8b, 0xae, 0x9e, 0xaa, 0x74, 0x4e, 0x91, 0x5e, 0x36, 0xee, 0x18, 0x6b,
	0xdf, 0x18, 0xb0, 0xe0, 0x06, 0xdd, 0x51, 0xae, 0x6b, 0xd9, 0x32, 0x67, 0x75, 0xb9, 0x39, 0x75,
	0xe3, 0xc5, 0xad, 0x76, 0x20, 0x9f, 0xa5, 0x09, 0x43, 0xd3, 0xdd, 0xa0, 0x5b, 0x22, 0xa1, 0xc7,
	0xe3, 0x6f, 0xe6, 0xc7, 0x84, 0xb3, 0x3f, 0x0d, 0xe3, 0xc7, 0x54, 0xba, 0x51, 0x5f, 0xfb, 0x39,
	0x75, 0xb1, 0xa1, 0x48, 0xba, 0x53, 0xad, 0x32, 0x67, 0xd6, 0xf3, 0x95, 0xdf, 0x94, 0xed, 0x4d,
	0x6c, 0xdb, 0xd3, 0xb6, 0xbd, 0x32, 0x67, 0x7b, 0xcf, 0x57, 0xf6, 0x2f, 0xa8, 0x4e, 0xb8, 0xfb,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x23, 0xb9, 0x4a, 0x95, 0x90, 0x0f, 0x00, 0x00,
}
