// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vctts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VcttsClient is the client API for Vctts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VcttsClient interface {
	StreamingSynthesis(ctx context.Context, opts ...grpc.CallOption) (Vctts_StreamingSynthesisClient, error)
}

type vcttsClient struct {
	cc grpc.ClientConnInterface
}

func NewVcttsClient(cc grpc.ClientConnInterface) VcttsClient {
	return &vcttsClient{cc}
}

func (c *vcttsClient) StreamingSynthesis(ctx context.Context, opts ...grpc.CallOption) (Vctts_StreamingSynthesisClient, error) {
	stream, err := c.cc.NewStream(ctx, &Vctts_ServiceDesc.Streams[0], "/sogou.speech.vctts.v1.vctts/StreamingSynthesis", opts...)
	if err != nil {
		return nil, err
	}
	x := &vcttsStreamingSynthesisClient{stream}
	return x, nil
}

type Vctts_StreamingSynthesisClient interface {
	Send(*StreamingSynthesisRequest) error
	Recv() (*StreamingSynthesisResponse, error)
	grpc.ClientStream
}

type vcttsStreamingSynthesisClient struct {
	grpc.ClientStream
}

func (x *vcttsStreamingSynthesisClient) Send(m *StreamingSynthesisRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vcttsStreamingSynthesisClient) Recv() (*StreamingSynthesisResponse, error) {
	m := new(StreamingSynthesisResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VcttsServer is the server API for Vctts service.
// All implementations must embed UnimplementedVcttsServer
// for forward compatibility
type VcttsServer interface {
	StreamingSynthesis(Vctts_StreamingSynthesisServer) error
	mustEmbedUnimplementedVcttsServer()
}

// UnimplementedVcttsServer must be embedded to have forward compatible implementations.
type UnimplementedVcttsServer struct {
}

func (UnimplementedVcttsServer) StreamingSynthesis(Vctts_StreamingSynthesisServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingSynthesis not implemented")
}
func (UnimplementedVcttsServer) mustEmbedUnimplementedVcttsServer() {}

// UnsafeVcttsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VcttsServer will
// result in compilation errors.
type UnsafeVcttsServer interface {
	mustEmbedUnimplementedVcttsServer()
}

func RegisterVcttsServer(s grpc.ServiceRegistrar, srv VcttsServer) {
	s.RegisterService(&Vctts_ServiceDesc, srv)
}

func _Vctts_StreamingSynthesis_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VcttsServer).StreamingSynthesis(&vcttsStreamingSynthesisServer{stream})
}

type Vctts_StreamingSynthesisServer interface {
	Send(*StreamingSynthesisResponse) error
	Recv() (*StreamingSynthesisRequest, error)
	grpc.ServerStream
}

type vcttsStreamingSynthesisServer struct {
	grpc.ServerStream
}

func (x *vcttsStreamingSynthesisServer) Send(m *StreamingSynthesisResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vcttsStreamingSynthesisServer) Recv() (*StreamingSynthesisRequest, error) {
	m := new(StreamingSynthesisRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Vctts_ServiceDesc is the grpc.ServiceDesc for Vctts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vctts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sogou.speech.vctts.v1.vctts",
	HandlerType: (*VcttsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingSynthesis",
			Handler:       _Vctts_StreamingSynthesis_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sogou/speech/vctts/v1/vctts.proto",
}
