// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MtClient is the client API for Mt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MtClient interface {
	TranslateText(ctx context.Context, in *TranslateTextRequest, opts ...grpc.CallOption) (*TranslateTextResponse, error)
}

type mtClient struct {
	cc grpc.ClientConnInterface
}

func NewMtClient(cc grpc.ClientConnInterface) MtClient {
	return &mtClient{cc}
}

func (c *mtClient) TranslateText(ctx context.Context, in *TranslateTextRequest, opts ...grpc.CallOption) (*TranslateTextResponse, error) {
	out := new(TranslateTextResponse)
	err := c.cc.Invoke(ctx, "/sogou.speech.mt.v1.mt/TranslateText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MtServer is the server API for Mt service.
// All implementations must embed UnimplementedMtServer
// for forward compatibility
type MtServer interface {
	TranslateText(context.Context, *TranslateTextRequest) (*TranslateTextResponse, error)
	mustEmbedUnimplementedMtServer()
}

// UnimplementedMtServer must be embedded to have forward compatible implementations.
type UnimplementedMtServer struct {
}

func (UnimplementedMtServer) TranslateText(context.Context, *TranslateTextRequest) (*TranslateTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateText not implemented")
}
func (UnimplementedMtServer) mustEmbedUnimplementedMtServer() {}

// UnsafeMtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MtServer will
// result in compilation errors.
type UnsafeMtServer interface {
	mustEmbedUnimplementedMtServer()
}

func RegisterMtServer(s grpc.ServiceRegistrar, srv MtServer) {
	s.RegisterService(&_Mt_serviceDesc, srv)
}

func _Mt_TranslateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MtServer).TranslateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sogou.speech.mt.v1.mt/TranslateText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MtServer).TranslateText(ctx, req.(*TranslateTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sogou.speech.mt.v1.mt",
	HandlerType: (*MtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TranslateText",
			Handler:    _Mt_TranslateText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sogou/speech/mt/v1/mt.proto",
}
